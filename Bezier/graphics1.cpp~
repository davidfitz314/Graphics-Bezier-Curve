// OpenGL/GLUT starter kit for Windows 7 and Visual Studio 2010
// Created spring, 2011
//
// This is a starting point for OpenGl applications.
// Add code to the "display" function below, or otherwise
// modify this file to get your desired results.
//
// For the first assignment, add this file to an empty Windows Console project
//		and then compile and run it as is.
// NOTE: You should also have glut.h,
// glut32.dll, and glut32.lib in the directory of your project.
// OR, see GlutDirectories.txt for a better place to put them.

#include <cmath>
#include <cstring>
#include <GL/glut.h>
#include <iostream>
#include <vector>
#include "Bezier.h"
#include "graphics.h"

using namespace std;

// Global Variables (Only what you need!)
double screen_x = 800;
double screen_y = 600;

vector<Bezier> CURVES;
vector<int> COLORS;

double g_middle = false;

int LAST_SELECTED_CURVE = -1;
int CURRENT_POINT = -1;
int CURRENT_CURVE = -1;

int mouse_x;
int mouse_y;

enum {RED, GREEN, BLUE, YELLOW};
enum {QUIT, ADD};

// 
// Functions that draw basic primitives
//

void DrawLine(double x1, double y1, double x2, double y2) {
	glBegin(GL_LINES);
	glVertex2d(x1, y1);
	glVertex2d(x2, y2);
	glEnd();
}

void DrawCircle(double x1, double y1, double radius)
{
	glBegin(GL_POLYGON);
	for(int i=0; i<32; i++)
	{
		double theta = (double)i/32.0 * 2.0 * 3.1415926;
		double x = x1 + radius * cos(theta);
		double y = y1 + radius * sin(theta);
		glVertex2d(x, y);
	}
	glEnd();
}

void DrawRectangle(double x1, double y1, double x2, double y2)
{
	glBegin(GL_QUADS);
	glVertex2d(x1,y1);
	glVertex2d(x2,y1);
	glVertex2d(x2,y2);
	glVertex2d(x1,y2);
	glEnd();
}

void DrawTriangle(double x1, double y1, double x2, double y2, double x3, double y3)
{
	glBegin(GL_TRIANGLES);
	glVertex2d(x1,y1);
	glVertex2d(x2,y2);
	glVertex2d(x3,y3);
	glEnd();
}

// Outputs a string of text at the specified location.
void DrawText(double x, double y, const char *string)
{
	void *font = GLUT_BITMAP_9_BY_15;

	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    glEnable(GL_BLEND);
	
	int len, i;
	glRasterPos2d(x, y);
	len = (int) strlen(string);
	for (i = 0; i < len; i++) 
	{
		glutBitmapCharacter(font, string[i]);
	}

    glDisable(GL_BLEND);
}


//
// GLUT callback functions
//

// This callback function gets called by the Glut
// system whenever it decides things need to be redrawn.
void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT);

	// Test lines that draw all three shapes and some text.
	// Delete these when you get your code working.

	for (unsigned int i = 0; i < CURVES.size(); i++) {
		switch (COLORS[i]) {
			case RED:
				glColor3d(1,0,0);
				break;
			case GREEN:
				glColor3d(0,1,0);
				break;
			case BLUE:
				glColor3d(0,0,1);
				break;
			case YELLOW:
				glColor3d(1,1,0);
				break;
			default:
				break;
		}
		CURVES[i].DrawCurve();
		CURVES[i].DrawControlPoints();
	}

	glColor3d(0,0,0);

	glutSwapBuffers();
}


// This callback function gets called by the Glut
// system whenever a key is pressed.
void keyboard(unsigned char c, int x, int y)
{
	switch (c) 
	{
		case 27: // escape character means to quit the program
			exit(0);
			break;
		case 'q':
			exit(0);
			break;
		case 'b':
			// do something when 'b' character is hit.
			break;
		default:
			return; // if we don't care, return without glutPostRedisplay()
	}

	glutPostRedisplay();
}


// This callback function gets called by the Glut
// system whenever the window is resized by the user.
void reshape(int w, int h)
{
	// Reset our global variables to the new width and height.
	screen_x = w;
	screen_y = h;

	// Set the pixel resolution of the final picture (Screen coordinates).
	glViewport(0, 0, w, h);

	// Set the projection mode to 2D orthographic, and set the world coordinates:
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0, w, 0, h);
	glMatrixMode(GL_MODELVIEW);

}

// This callback function gets called by the Glut
// system whenever any mouse button goes up or down.
void mouse(int mouse_button, int state, int x, int y)
{
	y = screen_y-y; // 0,0 is bottom left instead of top left
	if (mouse_button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
		mouse_x = x;
		mouse_y = y;
		for (unsigned int i = 0; i < CURVES.size(); i++) {
			if (CURVES[i].IsPicked(x, y) != -1) {
				CURRENT_CURVE = i;
				CURRENT_POINT = CURVES[i].IsPicked(x, y);
				LAST_SELECTED_CURVE = i;
				break;
			}
		}
	}
	if (mouse_button == GLUT_LEFT_BUTTON && state == GLUT_UP) {
		CURRENT_POINT = -1;
		CURRENT_CURVE = -1;
	}
	if (mouse_button == GLUT_MIDDLE_BUTTON && state == GLUT_DOWN) 
	{
		mouse_x = x;
		mouse_y = y;
		for (unsigned int i = 0; i < CURVES.size(); i++) {
			if (CURVES[i].IsPicked(x, y) != -1) {
				CURRENT_CURVE = i;
				CURRENT_POINT = CURVES[i].IsPicked(x, y);
				g_middle = true;
				LAST_SELECTED_CURVE = i;
				break;
			}
		}
	}
	if (mouse_button == GLUT_MIDDLE_BUTTON && state == GLUT_UP) 
	{
		CURRENT_POINT = -1;
		CURRENT_CURVE = -1;
		g_middle = false;
	}

	glutPostRedisplay();
}

void motion(int x, int y) {
	y = screen_y-y; // 0,0 is bottom left instead of top left
	if (CURRENT_CURVE != -1 && !g_middle) {
		CURVES[CURRENT_CURVE].Update(CURRENT_POINT, x, y);
	} else if (CURRENT_CURVE != -1 && g_middle) {
		CURVES[CURRENT_CURVE].UpdateM(CURRENT_POINT, x, y);
	}
	glutPostRedisplay();
}

// Your initialization code goes here.
void InitializeMyStuff()
{
	mouse_x = 300;
	mouse_y = 300;
	CURVES.push_back(Bezier(
			Point2(300, 270),
			Point2(300, 310),
			Point2(400, 300),
			Point2(400, 340)
			));
	COLORS.push_back(RED);
}

void color_menu(int id) {
	if (LAST_SELECTED_CURVE != -1) {
		switch (id) {
			case RED:
				COLORS[LAST_SELECTED_CURVE] = RED;
				break;
			case GREEN:
				COLORS[LAST_SELECTED_CURVE] = GREEN;
				break;
			case BLUE:
				COLORS[LAST_SELECTED_CURVE] = BLUE;
				break;
			case YELLOW:
				COLORS[LAST_SELECTED_CURVE] = YELLOW;
				break;
			default:
				return;
		}
	}
}

void top_menu(int id) {
	int x = mouse_x;
	int y = mouse_y;
	switch (id) {
		case QUIT:
			exit(0);
			break;
		case ADD:
			if (CURVES.size() >= 5)
				break;
			CURVES.push_back(
					Bezier(
						Point2(x, y),
						Point2(x+50,y+50),
						Point2(x+100,y-50),
						Point2(x+150,y)
						)
					);
			COLORS.push_back(GREEN);
			break;
		default:
			return;
	}
}


int main(int argc, char **argv)
{
	glutInit(&argc, argv);

	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(screen_x, screen_y);
	glutInitWindowPosition(50, 50);

	int fullscreen = 0;
	if (fullscreen) 
	{
		glutGameModeString("800x600:32");
		glutEnterGameMode();
	} 
	else 
	{
		glutCreateWindow("Bezier Curves");
	}

	glutDisplayFunc(display);
	glutKeyboardFunc(keyboard);
	glutReshapeFunc(reshape);
	glutMouseFunc(mouse);
	glutMotionFunc(motion);

	int sub_menu = glutCreateMenu(color_menu);
	glutAddMenuEntry("Red", RED);
	glutAddMenuEntry("Green", GREEN);
	//glutAddMenuEntry("Bright Green", 3);
	glutAddMenuEntry("Blue", BLUE);
	glutAddMenuEntry("Yellow", YELLOW);

	glutCreateMenu(top_menu);
	glutAddMenuEntry("quit", QUIT);
	glutAddMenuEntry("Add curve",ADD);
	glutAddSubMenu("Set Color", sub_menu);
	glutAttachMenu(GLUT_RIGHT_BUTTON);

	glColor3d(0,0,0); // forground color
	glClearColor(.1, .1, .1, 0); // background color
	InitializeMyStuff();

	glutMainLoop();

	return 0;
}
